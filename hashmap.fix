module HashMap;

import Hash;

type HashMap k v = unbox struct { _table : Array (Array (Option (k, v))), _size : I64 };

// Finds the place where an element with a key is stored.
// Returns pair of (index in hash table, index in bucket).
_find_place : [k : HashKey] k -> HashMap k v -> (I64, Option I64);
_find_place = |k, mp| (
    let cap = mp.get_capacity;
    if cap == 0 { (-1, Option::none()) };
    let table_idx = (k.hash % cap.to_U64).to_I64;
    let opt_bucket_idx = mp.@_table.@(table_idx).find_by(|opt_kv| opt_kv.is_some && opt_kv.as_some.@0 == k);
    (table_idx, opt_bucket_idx)
);

// Gets a POT (power-of-two) value which is less than or equal to the given value.
// This is used for calculating capacity value.
_get_pot_geq : I64 -> I64;
_get_pot_geq = |max_size| (
    loop(1, |v| if v >= max_size { break $ v } else { continue $ 2 * v })
);

// Checks whether a hashmap contains a key.
contains_key : [k : HashKey] k -> HashMap k v -> Bool;
contains_key = |k, mp| (
    let (_, opt_bucket_idx) = mp._find_place(k);
    opt_bucket_idx.is_some
);

// Creates an empty HashMap which is reserved so that it will not rehash until size exceeds the spacified value.
empty : I64 -> HashMap k v;
empty = |max_size| (
    let cap = HashMap::_get_pot_geq(max_size);
    HashMap { _table : Array::fill(cap, Array::empty(0)), _size : 0 }
);

// Erases an element from a HashMap.
erase : [k : HashKey] k -> HashMap k v -> HashMap k v;
erase = |k, mp| (
    let (table_idx, opt_bucket_idx) = mp._find_place(k);
    if opt_bucket_idx.is_some {
        let bucket_idx = opt_bucket_idx.as_some;
        let mp = mp.mod__table(Array::mod(table_idx, Array::set(bucket_idx, Option::none())));
        mp.mod__size(Add::add(-1))
    } else {
        mp
    }
);

// Finds an element from a HashMap.
find : [k : HashKey] k -> HashMap k v -> Option v;
find = |k, mp| (
    let (table_idx, opt_bucket_idx) = mp._find_place(k);
    if opt_bucket_idx.is_none {
        Option::none()
    } else {
        let bucket_idx = opt_bucket_idx.as_some;
        let v = mp.@_table.@(table_idx).@(bucket_idx).as_some.@1;
        Option::some(v)
    }
);

// Finds an element from a HashMap. If the map doesn't contain the key, it returns the given default value.
find_or : [k : HashKey] k -> v -> HashMap k v -> v;
find_or = |key, def, mp| mp.find(key).as_some_or(def);

// Gets capacity of a HashMap. 
get_capacity : HashMap k v -> I64;
get_capacity = |mp| mp.@_table.get_size;

// Gets size (number of elements) of a HashMap.
get_size : HashMap k v -> I64;
get_size = |mp| mp.@_size;

// Inserts an element into a HashMap.
insert : [k : HashKey] k -> v -> HashMap k v -> HashMap k v;
insert = |k, v, mp| (
    let size = mp.get_size;
    let cap = mp.get_capacity;
    let mp = if size < cap { mp } else { mp.reserve(size+1) };
    let (table_idx, opt_bucket_idx) = mp._find_place(k);
    if opt_bucket_idx.is_some {
        let bucket_idx = opt_bucket_idx.as_some;
        mp.mod__table(Array::mod(table_idx, Array::set(bucket_idx, Option::some $ (k, v))))
    } else {
        let open_idx = mp.@_table.@(table_idx).find_by(Option::is_none);
        let mp = if open_idx.is_some {
            let open_idx = open_idx.as_some;
            mp.mod__table(Array::mod(table_idx, Array::set(open_idx, Option::some $ (k, v))))
        } else {
            mp.mod__table(Array::mod(table_idx, Array::push_back(Option::some $ (k, v))))
        };
        mp.mod__size(Add::add(1))
    }
);

// Reserves a HashMap so that it will not rehash until size exceeds the spacified value.
reserve : [k : HashKey] I64 -> HashMap k v -> HashMap k v;
reserve = |max_size, mp| (
    if max_size <= mp.get_capacity { mp };
    let new_mp = HashMap::empty(max_size);
    mp.to_iter.fold(new_mp, |(k, v), new_mp| new_mp.insert(k, v))
);

type HashMapIterator kv = Std::Iterator::FlattenIterator (Std::Iterator::MapIterator Std::Iterator::RangeIterator Std::I64 (Std::Iterator::FlattenIterator (Std::Iterator::MapIterator Std::Iterator::RangeIterator Std::I64 (Std::Option::OptionIterator (Std::Option kv))) (Std::Option::OptionIterator (Std::Option kv)))) (Std::Iterator::FlattenIterator (Std::Iterator::MapIterator Std::Iterator::RangeIterator Std::I64 (Std::Option::OptionIterator (Std::Option kv))) (Std::Option::OptionIterator (Std::Option kv)));

// Converts a HashMap into an iterator.
to_iter : HashMap k v -> HashMapIterator (k, v);
to_iter = |mp| (
    Iterator::range(0, mp.get_capacity).flat_map(|table_idx| (
        Iterator::range(0, mp.@_table.@(table_idx).get_size).flat_map(|bucket_idx| (
            mp.@_table.@(table_idx).@(bucket_idx).to_iter
        ))
    ))
);